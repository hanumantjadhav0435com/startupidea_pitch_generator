AI Startup Pitch Generator – Full Project Specification (Text Format)
Objective:
A web app that takes a startup idea from the user and generates a complete investor pitch deck using Gemini API, with an option to download the results as a PowerPoint presentation.

🔧 Tech Stack
Backend: Python Flask

Frontend: HTML, CSS (Tailwind or Bootstrap), JavaScript

AI API: Gemini (or OpenAI as alternative)

Slide Generator: python-pptx

Other Tools: Flask-CORS, dotenv, requests

📁 Folder Structure
graphql
Copy
Edit
AI-Pitch-Generator/
│
├── app.py                 # Flask backend logic
├── templates/
│   └── index.html         # User interface
├── static/
│   ├── style.css          # Optional styles
│   └── script.js          # Frontend logic (AJAX, UI updates)
├── pitch_generator.py     # Gemini API call + JSON response parser
├── ppt_generator.py       # Creates PowerPoint from response
├── .env                   # Gemini API key
├── requirements.txt       # Required Python packages
└── README.md              # Instructions
📦 requirements.txt
nginx
Copy
Edit
flask
flask-cors
python-dotenv
requests
python-pptx
🔐 .env Example
ini
Copy
Edit
GEMINI_API_KEY=your_gemini_api_key_here
🚀 Workflow Overview
User submits a startup idea via a form.

The frontend sends a POST request to /generate_pitch.

Flask calls Gemini API with the formatted prompt.

Gemini responds with:

One-line pitch

Problem statement

Monetization model

5-slide investor pitch outline

Data is displayed in the browser.

On click of “Download as PPT”, Flask generates .pptx file using ppt_generator.py and returns it to the user.

🧠 Gemini Prompt Example
python
Copy
Edit
prompt = f"""
You are an expert startup mentor.
Given the idea: \"{user_input}\", generate the following:
1. One-line startup pitch.
2. Clear problem statement.
3. Monetization strategy.
4. Suggested 5-slide investor pitch deck (titles + bullet points).
Format your response in JSON.
"""
🧪 Flask API Routes
python
Copy
Edit
@app.route("/generate_pitch", methods=["POST"])
def generate_pitch():
    idea = request.json["idea"]
    output = call_gemini_api(idea)
    return jsonify(output)

@app.route("/download_ppt", methods=["POST"])
def download_ppt():
    data = request.json
    ppt_path = generate_ppt(data)
    return send_file(ppt_path, as_attachment=True)
🎨 Frontend Features (index.html)
Text input for startup idea

“Generate Pitch” button

Output section for:

Pitch

Problem statement

Monetization model

5-slide deck

Button: “Download as PPT”

📤 Sample Gemini API Output
json
Copy
Edit
{
  "pitch": "Revolutionizing farming with AI-powered crop prediction.",
  "problem": "Farmers lack accurate tools to predict crop yields.",
  "monetization": "Freemium model with premium analytics and IoT integrations.",
  "slides": [
    {"title": "Problem", "points": ["Low yield accuracy", "Climate unpredictability"]},
    {"title": "Solution", "points": ["AI crop prediction", "IoT sensors"]},
    {"title": "Market", "points": ["$10B agri-tech market"]},
    {"title": "Business Model", "points": ["Subscription + hardware sales"]},
    {"title": "Team & Vision", "points": ["Founders from IIT", "Vision to scale globally"]}
  ]
}
📄 PPT Generator (ppt_generator.py)
Uses python-pptx

Iterates through the JSON slide data

Creates one slide per entry with title and bullet points

Saves as startup_pitch.pptx

